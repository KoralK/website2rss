import json
import os
import requests

def generate_dynamic_html(json_data, api_key):
    """
    Generates dynamic HTML content using the Gemmini 2 Flash API.
    """
    api_url = "https://api.gemmini2flash.com/v1/generate-html"  # Replace with actual Gemmini 2 Flash API endpoint
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
    }

    payload = {
        "data": json_data,
        "prompt": "Generate a dynamic HTML page for smart home device news with a responsive design.",
    }

    try:
        response = requests.post(api_url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()["html"]  # Adjust based on the actual response format
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e.response.status_code} - {e.response.text}")
        raise
    except Exception as e:
        print(f"Unexpected error: {e}")
        raise

if __name__ == "__main__":
    try:
        # Load the JSON data generated by the RSS script
        json_file_name = "bundle_rss.json"
        with open(json_file_name, "r") as json_file:
            json_data = json.load(json_file)
        print("JSON data loaded successfully.")

        # Retrieve the API key from the environment
        gemmini_api_key = os.getenv("GEMMINI_FLASH_API_KEY")
        if not gemmini_api_key:
            raise ValueError("GEMMINI_FLASH_API_KEY is not set in the environment.")

        # Generate the HTML
        print("Generating HTML...")
        dynamic_html = generate_dynamic_html(json_data, gemmini_api_key)

        # Save the HTML to a file
        html_file_name = "smart_home_news.html"
        with open(html_file_name, "w") as html_file:
            html_file.write(dynamic_html)
        print(f"HTML file '{html_file_name}' created successfully.")
    except FileNotFoundError:
        print(f"Error: '{json_file_name}' not found. Ensure the RSS generation step completed successfully.")
    except ValueError as ve:
        print(f"Error: {ve}")
    except Exception as e:
        print(f"Unexpected error: {e}")
